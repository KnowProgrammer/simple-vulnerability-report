function createTitlePage(doc) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName('Sheet2');
  var data = sheet.getRange(2, 1, 1, 3).getValues();
  var titleData = data[0];

  var title = titleData[0];
  var author = titleData[1];
  var date = new Date(titleData[2]);
  var formattedDate = Utilities.formatDate(date, Session.getScriptTimeZone(), "MMMM dd, yyyy");

  var body = doc.getBody();
  var table = body.insertTable(0);
  var cell = table.appendTableRow().appendTableCell();

  cell.appendParagraph(title).setHeading(DocumentApp.ParagraphHeading.HEADING1).setBold(true);
  cell.appendParagraph("Author: " + author);
  cell.appendParagraph("Date: " + formattedDate);

  table.setBorderWidth(0);
  table.setAttributes({ 
    BORDER_WIDTH: 0, 
    MARGIN_TOP: '3in',
    MARGIN_BOTTOM: '3in',
    WIDTH: 400
  });

  body.appendPageBreak();
}

function createExecutiveSummary(doc, bookmarks) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName('Executive_Summary');
  var data = sheet.getDataRange().getValues(); // Fetching all data from the Executive_Summary sheet

  var body = doc.getBody();
  body.appendPageBreak(); // Adding a page break before the Executive Summary

  // Inserting the main heading for the Executive Summary
  var executiveSummaryHeading = body.appendParagraph("Executive Summary").setHeading(DocumentApp.ParagraphHeading.HEADING1);

  // Creating a bookmark for the Executive Summary heading
  var esPosition = doc.newPosition(executiveSummaryHeading, 0);
  var esBookmark = doc.addBookmark(esPosition);
  bookmarks.push({ title: "Executive Summary", id: esBookmark.getId() });


  // Iterating through each column for headers and contents
  for (var i = 0; i < data[0].length; i++) {
    var heading = data[0][i]; // Header in the first row
    var content = data[1][i]; // Corresponding content in the second row

    if (heading && content) { // Check if both heading and content are not empty
      body.appendParagraph(heading).setHeading(DocumentApp.ParagraphHeading.HEADING2);
      body.appendParagraph(content);
    }
  }

  body.appendPageBreak(); // Adding a page break after the Executive Summary
}

function createSummaryOfFindings(doc, data, bookmarks) {
  var body = doc.getBody();
  var summaryHeaders = ["Vulnerability", "Severity", "CVSS Score"];

  // Create Summary of Findings
  var summaryPage = body.appendParagraph("Summary of Findings").setHeading(DocumentApp.ParagraphHeading.HEADING1);
  
  // Creating a bookmark for the Summary of Findings heading
  var sfPosition = doc.newPosition(summaryPage, 0);
  var sfBookmark = doc.addBookmark(sfPosition);
  bookmarks.push({ title: "Summary of Findings", id: sfBookmark.getId() });

  
  var summaryTable = body.appendTable();
  var headerRow = summaryTable.appendTableRow();
  summaryHeaders.forEach(function(header) {
    headerRow.appendTableCell(header).setBackgroundColor('#f3f3f3');
  });

  data.slice(1).forEach(function(row) {
    var tableRow = summaryTable.appendTableRow();
    tableRow.appendTableCell(row[0] ? row[0].toString() : "N/A");
    tableRow.appendTableCell(row[2] ? row[2].toString() : "N/A");
    tableRow.appendTableCell(row[1] ? row[1].toString() : "N/A");
  });
}

function createAppendixSection(doc, bookmarks) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var appendixSheet = spreadsheet.getSheetByName('Appendix');
  var appendixData = appendixSheet.getDataRange().getValues();

  var body = doc.getBody();
  var currentAppendixNumber = null;

  appendixData.forEach(function(row, rowIndex) {
    if (rowIndex > 0) { // Skipping the header row
      var appendixNumber = row[0];
      var contentType = row[1];
      var content = row[2];

      // Create a new heading and bookmark only if the appendix number changes
      if (appendixNumber !== currentAppendixNumber) {
        var appendixEntry = body.appendParagraph("Appendix " + appendixNumber);
        appendixEntry.setHeading(DocumentApp.ParagraphHeading.HEADING2);

        var entryPosition = doc.newPosition(appendixEntry, 0);
        var entryBookmark = doc.addBookmark(entryPosition);
        bookmarks.push({ title: "Appendix " + appendixNumber, id: entryBookmark.getId() });

        currentAppendixNumber = appendixNumber;
      }

      // Handle different content types
      if (contentType === 'text' || contentType === 'command') {
        if (content) {
          var paragraph = body.appendParagraph(content);
          // Apply specific background color based on the content type
          if (contentType === 'command') {
            paragraph.setBackgroundColor('#ffad3a'); // Light yellow for 'command'
          } else if (contentType === 'text') {
            paragraph.setBackgroundColor('#FFFFFF'); // White for 'text'
          }
        }
      } else if (contentType === 'imageUrl' && content) {
        // Here we call the new function to insert images from URLs
        insertImageFromUrl(body, content); // content is expected to be the URL of the image
      }

      // Insert a horizontal rule or spacing for separation
      body.appendParagraph(""); // or use body.appendParagraph("") for extra spacing
    }
  });

  body.appendPageBreak();
}

// This new function fetches and inserts an image from a provided URL
function insertImageFromUrl(body, imageUrl) {
  // Transmute Dropbox shared link into a direct link
  if (imageUrl.includes("dropbox.com")) {
    imageUrl = imageUrl.replace("www.dropbox.com", "dl.dropboxusercontent.com").replace("?dl=0", "?dl=1");
  }

  try {
    var response = UrlFetchApp.fetch(imageUrl, {
      'headers': { 'Authorization': 'YOUR DROPBOX API KEY' } // Only necessary if accessing private files
    });
    var blob = response.getBlob();
    var img = body.appendImage(blob);
    // Optionally resize the image
    var maxWidth = 624; // You may adjust this value
    var aspectRatio = img.getHeight() / img.getWidth();
    var newHeight = maxWidth * aspectRatio;
    img.setWidth(maxWidth);
    img.setHeight(newHeight);
  } catch (e) {
    Logger.log('An error occurred while fetching the image: ' + e.toString());
  }
}










function generateVulnerabilityReport() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var dataSheet = spreadsheet.getSheetByName('Sheet1');
  var data = dataSheet.getDataRange().getValues();

  // Sort data by CVSS Score in descending order
  data.slice(1).sort(function(a, b) {
    return b[1] - a[1];
  });

  var docHeaders = ["Vulnerability", "CVSS Score", "Severity", "CVSS URL", "Target", "Impact", "Details", "Reproduction Steps", "Recommendation", "References"];

  var docName = 'Vulnerability Report';
  var doc = DocumentApp.create(docName);
  
  // Create Title Page
  createTitlePage(doc);


  var body = doc.getBody();
  var bookmarks = []; // initilize bookmarks array for TOC

  // Create Executive Summary
  createExecutiveSummary(doc, bookmarks);

  // Create Summary of Findings
  createSummaryOfFindings(doc, data, bookmarks);

  // Append Vulnerabilities Section
  data.slice(1).forEach(function(row) {
    body.appendPageBreak();
    var table = body.appendTable();
    docHeaders.forEach(function(header, index) {
      var tableRow = table.appendTableRow();
      tableRow.appendTableCell(header).setBackgroundColor('#f3f3f3');
      var content = row[index] ? row[index].toString() : "N/A";
      tableRow.appendTableCell(content);
    });
    table.setColumnWidth(0, 100);
    table.setColumnWidth(1, 360);

    // Bookmark handling for each vulnerability (modify as needed)
    var position = doc.newPosition(table.getCell(0, 0), 0);
    var bookmark = doc.addBookmark(position);
    bookmarks.push({ title: row[0].toString(), id: bookmark.getId() });
  });


  // Add the Appendix Section
  createAppendixSection(doc, bookmarks);


  // Now, create the Table of Contents at the beginning of the document
  createTableOfContentsAtBeginning(doc, bookmarks);

  moveDocumentToFolder(doc, 'PUT-YOUR-FOLDER GOOGLE DRIVE ID HERE');
}






function createTableOfContentsAtBeginning(doc, bookmarks) {
  var body = doc.getBody();

  // Find the position right after the Title Page (or adjust as needed)
  var tocIndex = findPositionAfterSection(body.getParagraphs(), "Title Page Heading");
  tocIndex = tocIndex !== -1 ? tocIndex : 1; // Default to position 1 if Title Page not found

  // Insert the Table of Contents heading
  body.insertParagraph(tocIndex++, 'Table of Contents').setHeading(DocumentApp.ParagraphHeading.HEADING1);

  // Add each bookmark to the TOC
  bookmarks.forEach(function(bookmark) {
    var tocEntry = body.insertParagraph(tocIndex++, bookmark.title);
    tocEntry.setLinkUrl('#bookmark=' + bookmark.id)
            .setForegroundColor('#1155cc')
            .setUnderline(true);
  });

  // Insert a page break after the TOC
  body.insertParagraph(tocIndex, "").editAsText().insertText(0, "\n");
}


// Utility function to find the index after a given section title
function findPositionAfterSection(paragraphs, sectionTitle) {
  for (var i = 0; i < paragraphs.length; i++) {
    if (paragraphs[i].getText().includes(sectionTitle)) {
      // Return the index after the found section
      return i + 1; 
    }
  }
  return -1; // Return -1 if not found
}



function moveDocumentToFolder(doc, folderId) {
  var file = DriveApp.getFileById(doc.getId());
  var folder = DriveApp.getFolderById(folderId);
  folder.addFile(file);
  DriveApp.getRootFolder().removeFile(file);
}
